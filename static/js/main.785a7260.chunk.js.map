{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","features/CommonActions/App.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","api/types.ts","utils/redux-utils.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/selectors.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Application/selectors.ts","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","getTodolists","get","createTodolist","title","post","deleteTodolist","id","delete","concat","updateTodolist","put","getTasks","todolistId","deleteTask","taskId","createTask","taskTitile","updateTask","model","authAPI","login","data","logout","me","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","arguments","length","undefined","dispatch","error","messages","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","fetchTodolistsTC","createAsyncThunk","async","param","res","todolists","removeTodolistTC","_ref","changeTodolistEntityStatus","addTodolistTC","resultCode","todolist","item","changeTodolistTitleTC","asyncActions","slice","createSlice","name","initialState","reducers","changeTodolistFilter","state","action","index","findIndex","tl","payload","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","splice","unshift","actions","fetchTasks","tasks","items","removeTask","addTask","err","task","getState","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","setTitle","useState","setError","addItemHandler","trim","createElement","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","color","IconButton","onClick","style","marginLeft","AddBox","EditableSpan","props","console","log","editMode","setEditMode","autoFocus","onBlur","activateViewMode","onDoubleClick","activateEditMode","TaskStatuses","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","newValue","key","className","position","Checkbox","size","top","right","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","resultAction","_resultAction$payload","_resultAction$payload2","rejected","_resultAction$payload3","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Button","Paper","padding","removeTodolist","paddingTop","selectIsLoggedIn","auth","isLoggedIn","TodolistsList","useSelector","addTodolistCallback","Fragment","Grid","container","spacing","flexWrap","allTodolistTasks","width","Redirect","to","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","reducer","tasksReducer","Alert","MuiAlert","Object","assign","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","selectStatus","selectIsInitialized","isInitialized","setIsLoggedIn","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","authReducer","initializeApp","appReducer","App","authSelectors","logoutHandler","AppBar","Toolbar","LinearProgress","Container","fixed","Route","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","Provider","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.785a7260.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the appActions load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web appActions is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different appActions. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType, ResponseType, TaskType, TodolistType, UpdateTaskModelType} from './types'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '87fb7732-33cb-44fa-a33f-93280547d337'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {appActions} from '../features/CommonActions/App'\r\nimport {Dispatch} from 'redux'\r\nimport {AxiosError} from 'axios'\r\nimport {ResponseType} from '../api/types'\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,} from '../../utils/error-utils'\r\nimport {TodolistType} from '../../api/types'\r\nimport {ThunkError} from '../../utils/types'\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist', async (todolistId, {dispatch, rejectWithValue}) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n    const res = await todolistsAPI.deleteTodolist(todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI, false)\r\n    }\r\n})\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {AppRootStateType, ThunkError} from '../../utils/types'\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/types'\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/removeTask',\r\n    async (param, thunkAPI) => {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    })\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI, false)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            return handleAsyncServerNetworkError(err as AxiosError, thunkAPI, false)\r\n        }\r\n    })\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n                                                                      thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== '') {\r\n                addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"filled\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   color=\"secondary\"\r\n        />\r\n        <IconButton color=\"secondary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {tasksActions, todolistsActions} from '../../index'\r\nimport {TaskStatuses, TaskType} from '../../../../api/types'\r\nimport {useActions} from '../../../../utils/redux-utils'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n    style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"secondary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton size={'small'} onClick={onClickHandler} style={{ position: 'absolute', top: '2px', right: '2px'} }>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from '../index'\r\nimport {TaskStatuses, TaskType} from '../../../api/types'\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id)\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title: title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n                    style={{position: 'absolute', right: '5px', top: '5px'}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from '../Auth/selectors'\r\nimport {tasksActions, todolistsActions} from './index'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions, useAppDispatch} from '../../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolistsTC, addTodolistTC} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'wrap'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer  = todolistsSlice.reducer\r\nconst tasksReducer  = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../../features/CommonActions/App'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions} from '../../utils/redux-utils'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null});\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FieldErrorType, LoginParamsType} from '../../api/types'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {login} from './auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from './selectors'\r\nimport {authActions} from './index'\r\nimport {Action} from 'redux'\r\nimport {useActions, useAppDispatch} from '../../utils/redux-utils'\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction = await dispatch(authActions.login(values));\r\n\r\n            if  (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/todolist\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            color=\"secondary\"\r\n                            error={!!formik.errors.email}\r\n                            helperText={formik.errors.email}\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            color=\"secondary\"\r\n                            error={!!formik.errors.password}\r\n                            helperText={formik.errors.password}\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'secondary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {authActions} from '../Auth'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    LinearProgress,\r\n    Toolbar,\r\n} from '@material-ui/core'\r\nimport {TodolistsList} from '../features/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../features/Application'\r\nimport {Route} from 'react-router-dom'\r\nimport {authActions, Login} from '../features/Auth'\r\nimport {selectIsInitialized, selectStatus} from '../features/Application/selectors'\r\nimport {authSelectors} from '../features/Auth'\r\nimport {useActions} from '../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            initializeApp()\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\" color='inherit'>\r\n                    <Toolbar>\r\n                        <div className='title'>TodoList</div>\r\n                        {isLoggedIn && <Button color=\"secondary\" variant={\"outlined\"} onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress color={\"secondary\"}/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/todolist'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from '../features/Application'\r\nimport {authReducer} from '../features/Auth'\r\nimport {tasksReducer, todolistsReducer} from '../features/TodolistsList'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './app/App'\r\nimport {store} from './app/store'\r\nimport {Provider} from 'react-redux'\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'))\r\n\r\n// If you want your appActions to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}